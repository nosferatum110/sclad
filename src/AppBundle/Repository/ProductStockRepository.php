<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Bunch;
use AppBundle\Entity\ProductSale;
use AppBundle\Entity\ProductStock;
use AppBundle\Entity\Provider;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * ProductStockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductStockRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * findSimilarNames
     * 
     * @param type $title
     */
    public function findSimilarNames($title)
    {
        $result = $this->createQueryBuilder('p')
           ->where('p.title LIKE :title')
           ->setParameter('title', '%' . $title . '%')
           ->getQuery()
           ->getResult();
        
        return $result;
    }

    /**
     * findAllWithGroup
     *
     * @return array
     */
    public function findAllWithGroup()
    {
        $sql = 'SELECT b.id AS bid, min(p.id) AS pid FROM bunch AS b
	              LEFT JOIN product_stock AS p
                    ON p.bunch_id = b.id
                 GROUP BY b.id';

        $ids = [];
        $result = $this->getEntityManager()->getConnection()->fetchAll($sql);
        foreach ($result as $item) {
            if (!empty($item['pid'])) $ids[] = $item['pid'];
        }

        // get products ids with bunch
        $products = $this->createQueryBuilder('p')
            ->where('p.bunchId IS NULL OR p.id IN (:products_ids)')
            ->setParameter('products_ids', $ids)
            ->getQuery()
            ->getResult();

        return $products;
    }

    /**
     * searchByTitle
     *
     * @param $title
     * @return array
     */
    public function searchByTitle($title, $unless = [])
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.title LIKE :title')
            ->setParameter('title', '%' . $title . '%');
        if (!empty($unless)) {
            $qb->andWhere('p.id NOT IN (:ids)')
               ->setParameter('ids', $unless);
        }

        $qb->andWhere('p.qty<>0');

        $results = $qb->getQuery()->getResult();

        return $results;
    }

    /**
     * findOneWithBunch
     *
     * @param $title
     * @return mixed
     */
    public function findOneWithBunch($title)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.title = :title')
            ->setParameter('title', $title);
        $qb->andWhere('p.bunchId IS NOT NULL');

        $results = $qb->getQuery()->getResult();

        if (!empty($results)) {
            return $results[0];
        }

        return NULL;
    }

    /**
     * Get Total
     *
     * @return array
     */
    public function getTotal()
    {
        $total = [];

        $qb = $this->createQueryBuilder('p')
                    ->select('SUM(p.price*p.qty) AS total_price,
                                    SUM(p.qty) AS total_qty,
                                    SUM(p.priceByn*p.qty) AS total_price_byn');

        $result = $qb->getQuery()->getResult();
        if (isset($result[0]['total_qty'])) {
            $total['qty'] = $result[0]['total_qty'];
            $total['price'] = $result[0]['total_price'];
            $total['price_byn'] = $result[0]['total_price_byn'];
        }

        return $total;
    }

    /**
     * findStatsByMounth
     *
     * @return array
     */
    public function findStatsByMonth()
    {
        $date = new \DateTime();
        $qb = $this->createQueryBuilder('p')
            ->select('SUM(p.price*p.qty) AS total_price,
                            SUM(p.qty) AS total_qty,
                            SUM(p.priceByn*p.qty) AS total_price_byn,
                            YEAR(p.created) AS year,
                            MONTH(p.created) AS month')
            ->where('YEAR(p.created) = :cur_year')
            ->setParameter('cur_year', $date->format('Y'))
            ->groupBy('year, month');

        $tmp = $qb->getQuery()->getResult();
        $result = [];
        foreach ($tmp as $item) {
            $result[$item['month']] = $item;
        }

        return $result;
    }

    /**
     * findWeeksStatsByMonth
     *
     * @param $month
     * @return array
     */
    public function findWeeksStatsByMonth($month)
    {
        $date = new \DateTime();
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('total_qty', 'total_qty');
        $rsm->addScalarResult('total_price', 'total_price');
        $rsm->addScalarResult('total_price_byn', 'total_price_byn');
        $rsm->addScalarResult('y', 'y');
        $rsm->addScalarResult('m', 'm');
        $rsm->addScalarResult('w', 'w');
        $qb = $this->getEntityManager()->createNativeQuery('
            SELECT SUM(ps.qty) AS total_qty,
                   SUM(ps.price*ps.qty) AS total_price,
                   SUM(ps.price_byn*ps.qty) AS total_price_byn,
                   YEAR(ps.created) AS y, MONTH(ps.created) AS m,
                   (CASE WHEN DAY(ps.created) < 8 THEN 1 
                    WHEN DAY(ps.created) > 7 AND DAY(ps.created) < 15 THEN 2
                    WHEN DAY(ps.created) > 14 AND DAY(ps.created) < 22 THEN 3
                    WHEN DAY(ps.created) > 21 AND DAY(ps.created) < 29 THEN 4
                    ELSE 5 END) AS w
                FROM product_stock AS ps 
                WHERE
                  MONTH(ps.created) = :mon
                  AND YEAR(ps.created) = :cur_year
                GROUP BY y, m, w', $rsm)
            ->setParameter('cur_year', $date->format('Y'))
            ->setParameter('mon', $month);

        $tmp = $qb->getResult();
        $result = [];
        foreach($tmp as $item) {
            $item['year'] = $item['y'];
            $item['month'] = $item['m'];
            $item['week'] = $item['w'];
            $result[$item['week']] = $item;
        }
        return $result;
    }

    /**
     * saveCheckedData
     *
     * @param $checkedData
     * @param $providerId
     * @param $documents
     * @return array
     */
    public function saveCheckedData($checkedData, $providerId = null, $documents = 0, $rate = 1)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();
        $bunchRepo = $em->getRepository('AppBundle:Bunch');
        $productRepo = $this;

        // Browse products that have 100% match by name with bunch
        $countOldProductInserted = 0;$beforeImportEmptyBunch = [];
        if (isset($checkedData['old']) && !empty($checkedData['old']))
        {
            foreach ($checkedData['old'] as $item)
            {
                $bunchBall = ProductStock::GREEN_BALL;
                $bunch = $bunchRepo->findOneById($item['db_item']->getId());

                // check bunch: if bunch is "empty" then mark product as blue
                if (isset($beforeImportEmptyBunch[$bunch->getId()])) {
                    $bunchBall = ProductStock::BLUE_BALL;
                } elseif ($bunch->getTotal() == 0) {
                    // remember bunch total before import
                    $beforeImportEmptyBunch[$bunch->getId()] = 0;
                    $bunchBall = ProductStock::BLUE_BALL;
                }

                if (isset($item['поставщик']) && !empty($item['поставщик']))
                {
                    $providers = $em->getRepository('AppBundle:Provider');
                    $curProvider = $providers->findOneByTitle($item['поставщик']);
                    if ($curProvider) {
                        $providerId = $curProvider->getId();
                    }
                    else {
                        $provider = $this->_createdProvider($item['поставщик']);
                        $providerId = $provider->getId();
                    }
                }

                $this->_createProductStock(false, $item, null, $providerId, $bunch, $documents, $rate);

                $bunch->setBall($bunchBall);
                $em->persist($bunch);
                $em->flush();

                $countOldProductInserted++;
            }
        }

        $productsTitle = $checkedData['productsTitle'];
        $productsSimilar = $checkedData['productsSimilar'];

        // Browse products that don't have 100% match by name,
        // but marked by the user as identical,
        // and create based on their group
        $countNewProductInserted = 0;
        $countBunchCreated = 0;

        foreach ($checkedData['new'] as $key => $item)
        {
            $bunchId = null;
            $bunchBall = ProductStock::GREEN_BALL;
            if (isset($productsTitle[$key]) && $productsTitle[$key] == $item['Наименование'] && isset($productsSimilar[$key]) && !empty($productsSimilar[$key]))
            {
                 if ( strpos($productsSimilar[$key], 'p_') === 0 || strpos($productsSimilar[$key], 'b_') === 0 ) {
                    // if we have similar bunch or product
                    $idArr = explode('_', $productsSimilar[$key]);
                    if (isset($idArr[0]) && $idArr[0] == 'p') {
                        // create group by product id
                        $productSimilar = $productRepo->findOneById($idArr[1]);
                        $bunchBall = ProductStock::RED_BALL;
                        $bunch = $this->_createdBunch($productSimilar->getTitle(), $bunchBall);

                        $countBunchCreated++;

                        $bunchId = $bunch->getId();

                    } else if ($idArr[0] == 'b') {
                        // find group by banch id
                        $bunch = $bunchRepo->findOneById($idArr[1]);
                        $bunchId = $bunch->getId();
                    }
                }
                else {
                    // we have only name and we create bunch for this name
                    // but we must check maybe this bunch was created before in for block
                    if ( !($bunch = $bunchRepo->findOneByTitle($productsSimilar[$key])) ) {
                        $bunch = $this->_createdBunch($productsSimilar[$key]);
                        $countBunchCreated++;
                        $bunchBall = ProductStock::RED_BALL;
                    }
                    else {
                        $bunchBall = ProductStock::GREEN_BALL;
                    }
                    $bunchId = $bunch->getId();
                }
            }

            if (is_null($bunchId))
            {
                // Check maybe this bunch was created before in for block
                if ( !($bunch = $bunchRepo->findOneByTitle($item['Наименование'])) ) {
                    $bunchBall = ProductStock::RED_BALL;
                    $bunch = $this->_createdBunch($item['Наименование'], $bunchBall);
                    $countBunchCreated++;
                }
                else {
                    $bunchBall = ProductStock::GREEN_BALL;
                }
                $bunchId = $bunch->getId();
            }

            if (isset($item['поставщик']) && !empty($item['поставщик']))
            {
                $providers = $em->getRepository('AppBundle:Provider');
                $curProvider = $providers->findOneByTitle($item['поставщик']);
                if ($curProvider) {
                    $providerId = $curProvider->getId();
                }
                else {
                    $provider = $this->_createdProvider($item['поставщик']);
                    $providerId = $provider->getId();
                }
            }

            $product = $this->_createProductStock(true, $item, null, $providerId, $bunch, $documents, $rate);

            $bunch->setBall($bunchBall);
            $em->persist($bunch);
            $em->flush();

            if (isset($item['Продажа бел']) || isset($item['Продажа Долл']))
            {
                $priceSaleUsd = $item['Продажа Долл'];
                $priceSale = $item['Продажа бел'];

                $this->_createProductSale($product, $item['Количество'], $priceSale, $priceSaleUsd, $item['Дата Продажи']);
            }

            $countNewProductInserted ++ ;
        }

        return array($countNewProductInserted, $countOldProductInserted, $countBunchCreated);
    }

    /**
     * _createdProvider
     *
     * @param $title
     * @return Provider
     */
    protected function _createdProvider($title)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();

        $curProvider = new Provider();
        $curProvider->setTitle($title);

        $em->persist($curProvider);
        $em->flush();

        return $curProvider;
    }

    /**
     * _createdBunch
     *
     * @param $title
     * @return Bunch
     */
    protected function _createdBunch($title, $ball = null)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();

        $bunch = new Bunch();
        $bunch->setTitle($title);
        $bunch->setTotal(0);
        $bunch->setStar1(false);
        $bunch->setStar2(false);
        $bunch->setStar3(false);
        $bunch->setAvailability(1);
        $bunch->setBall($ball);

        $em->persist($bunch);
        $em->flush();

        return $bunch;
    }


    /**
     * _createProductStock
     *
     * @param $data
     * @param $productBall
     * @param $providerId
     * @param $bunch
     * @param $documents
     */
    protected function _createProductStock($isNew, $data, $productBall, $providerId, $bunch, $documents, $rate)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();

        $created = new \DateTime();
        if (isset($data['Дата Продажи']) && ($data['Дата Продажи'] instanceof \DateTime) ) {
            $created = $data['Дата Продажи'];
        }

        $product = new ProductStock();
        $product->setTitle($data['Наименование']);
        $product->setProviderId($providerId);
        $product->setBunchId($bunch->getId());
        $product->setBunch($bunch);
        $product->setPrice($data['Стоим Долл']);
        $product->setPriceByn($data['Стоим Бел']);
        $product->setSelfcost($data['Стоимость, руб.']);
        $product->setQty($data['Количество']);
        $product->setNds($data['Ставка НДС, %']);
        $product->setWeight($data['Масса груза, кг']);
        $product->setStar1(false);
        $product->setStar2(false);
        $product->setStar3(false);
        $product->setBall($productBall);
        $product->setWeightQty($data['Количество грузовых мест']);
        $product->setDocuments($documents);
        $product->setCreated($created);

        // find identical product (by price, provider, date and etc.)
        $identicalProduct = $this->findIdentical($product);
        if ($identicalProduct) {
            $identicalProduct->setQty($identicalProduct->getQty() + $product->getQty());
            $em->persist($identicalProduct);
            $em->flush();
            return $identicalProduct;
        }
        else {
            $em->persist($product);
            $em->flush();
            return $product;
        }
    }

    /**
     * _createProductSale
     *
     * @param $product
     * @param $priceSale
     * @param $date
     * @return mixed
     */
    protected function _createProductSale($product, $qty, $priceSale, $priceSaleUsd, $date)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();

        $productSale = new ProductSale();
        $productSale->setProductId($product->getId());
        $productSale->setProduct($product);
        $productSale->setBunchId($product->getBunch()->getId());
        $productSale->setBunch($product->getBunch());
        $productSale->setQty($qty);

        $productSale->setPrice($priceSale);
        $productSale->setPriceUsd($priceSaleUsd);

        $productSale->setDisabledRedBall(false);
        //date
        if ($date) {
            if ( !( $date instanceof \DateTime ) ) {
                $dateSale = \DateTime::createFromformat('d,n,Y', $date);
            }
            else {
                $dateSale = $date;
            }
            $productSale->setDate($dateSale);
        }
        else {
            $productSale->setDate($product->getCreated());
        }

        $em->persist($productSale);
        $em->flush();

        return $product;
    }

    /**
     * findIdentical
     *
     * @param $product
     * @return null
     */
    public function findIdentical($product)
    {
        $qb = $this->createQueryBuilder('ps');
        $qb->where('ps.title = :title')
            ->setParameter('title', $product->getTitle());
        $qb->andWhere('ps.providerId = :provider_id')
            ->setParameter('provider_id', $product->getProviderId());
        $qb->andWhere('ps.bunchId = :bunch_id')
            ->setParameter('bunch_id', $product->getBunch()->getId());
        $qb->andWhere('ps.price = :price')
            ->setParameter('price', $product->getPrice());
        $qb->andWhere('ps.priceByn = :price_byn')
            ->setParameter('price_byn', $product->getPriceByn());
        $qb->andWhere('ps.selfcost = :selfcost')
            ->setParameter('selfcost', $product->getSelfcost());
        $qb->andWhere('ps.nds = :nds')
            ->setParameter('nds', $product->getNds());
        $qb->andWhere('ps.weight = :weight')
            ->setParameter('weight', $product->getWeight());
        $qb->andWhere('ps.star1 = :star1')
            ->setParameter('star1', $product->getStar1());
        $qb->andWhere('ps.star2 = :star2')
            ->setParameter('star2', $product->getStar2());
        $qb->andWhere('ps.star3 = :star3')
            ->setParameter('star3', $product->getStar3());
        $qb->andWhere('ps.ball = :ball')
            ->setParameter('ball', $product->getBall());
        $qb->andWhere('ps.weightQty = :weight_qty')
            ->setParameter('weight_qty', $product->getWeightQty());
        $qb->andWhere('ps.documents = :documents')
            ->setParameter('documents', $product->getDocuments());
        $qb->andWhere('ps.created = :created')
            ->setParameter('created', $product->getCreated());

        $result = $qb->getQuery()->getResult();
        if (isset($result[0])) {
            return $result[0];
        }
        return null;
    }
}
